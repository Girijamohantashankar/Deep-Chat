{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModalpic.js","components/ScrollableChat.js","image/WelCome.gif","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/ProfileModal.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","className","placeholder","type","id","onChange","e","target","onClick","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","href","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","mb","mt","w","p","borderRadius","Tabs","isFitted","variant","TabList","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModalpic","isOpen","onOpen","onClose","useDisclosure","_Fragment","Image","boxSize","border","cursor","src","alt","Modal","size","isCentered","ModalOverlay","ModalContent","h","ModalHeader","fontSize","fontFamily","d","justifyContent","ModalCloseButton","ModalBody","flexDir","alignItems","Text","base","md","ModalFooter","Button","ScrollableChat","ScrollableFeed","map","style","display","Tooltip","label","placement","hasArrow","Avatar","mr","backgroundColor","concat","marginLeft","marginTop","padding","maxWidth","xmlns","width","height","x","y","fill","content","Date","createdAt","toLocaleTimeString","hour","minute","UserBadgeItem","handleFunction","admin","Badge","px","py","colorScheme","CloseIcon","pl","UserListItem","bg","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","IconButton","icon","ViewIcon","chatName","flexWrap","pb","FormControl","Input","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","event","key","isRequired","Lottie","options","marginBottom","lastTypingTime","getTime","setTimeout","welcomeImage","getSenderFull","Chatbox","borderWidth","ChatLoading","Stack","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","profileImage","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","ProfileModal","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.4c483ad5.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n  \n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"./Login.css\";\n\n\nconst Login = () => {\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"state login_content\">\n        <br />\n        <i className=\"fa fa-unlock-alt\"></i>\n        <br />\n        <h1>Log in</h1>\n      </div>\n      <div className=\"form\">\n        <input placeholder=\"Email\" type=\"text\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n        <input placeholder=\"password\" type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n\n        <div className=\"login btn_login\" onClick={submitHandler} isLoading={loading}>Login</div>\n      </div>\n      <div className=\"fack\">\n        <a href=\"#\">\n          <i className=\"fa fa-question-circle\"></i>Forgot password?\n       \n\n        </a>\n      </div>\n    </div> \n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport \"./Signup.css\";\n\nconst Signup = () => {\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"post-image\");\n      data.append(\"cloud_name\", \"girija\");\n      fetch(\"https://api.cloudinary.com/v1_1/girija/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <div className=\"panel signup\">\n      <div className=\"state signup\">\n        <br />\n        <i className=\"fa fa-unlock-alt\"></i>\n        <br />\n        <h1>Sign Up</h1>\n      </div>\n      <div className=\"form\">\n        <input\n          placeholder=\"Name\"\n          type=\"text\"\n          id=\"first-name\"\n          \n          onChange={(e) => setName(e.target.value)}\n        />\n        <input\n          placeholder=\"Email\"\n          type=\"text\"\n          id=\"email\"\n          \n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          placeholder=\"password\"\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <input\n          placeholder=\"password\"\n          type=\"password\"\n          id=\"password\"\n          value={confirmpassword}\n          onChange={(e) => setConfirmpassword(e.target.value)}\n        />\n        <div className=\"picture\">\n        <lable className=\"tet\">Upload your picture</lable>\n          <input type=\"file\" id=\"pic\" accept=\"image/*\"  onChange={(e) => postDetails(e.target.files[0])}/>\n          \n        </div>\n\n        <div className=\"login btn_sign\" onClick={submitHandler} isLoading={picLoading}>\n          Signup\n        </div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box mb=\"20px\" mt=\"30px\">\n        <h1>DeepChat</h1>\n      </Box>\n      <Box   w=\"100%\" p={4} borderRadius=\"lg\" >\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n \n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport \"./ProfileModal.css\";\r\n\r\nconst ProfileModalpic = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <Image\r\n          borderRadius=\"full\"\r\n          boxSize=\"50px\"\r\n          border=\"2px solid red\"\r\n          cursor=\"pointer\"\r\n          src={user.pic}\r\n          alt={user.name}\r\n          onClick={onOpen}\r\n        />\r\n      )}\r\n      <Modal\r\n        size=\"lg\"\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n        className=\"model_bg\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Profile:{user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              \r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModalpic;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./styles.css\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed className=\"react-scrollable-feed\">\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={2}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#dcf8c6\" : \"#fff\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 4 : 20,\n                borderRadius: \"10px\",\n                padding: \"5px 15px\",\n                \n                maxWidth: \"75%\",\n                position: \"relative\", \n              }}\n            >\n              {m.sender._id === user._id ? (\n                <span className=\"send_tool\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"15\" id=\"msg-dblcheck-ack\" x=\"2063\" y=\"2076\"><path d=\"M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.88a.32.32 0 0 1-.484.032l-.358-.325a.32.32 0 0 0-.484.032l-.378.48a.418.418 0 0 0 .036.54l1.32 1.267a.32.32 0 0 0 .484-.034l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.88a.32.32 0 0 1-.484.032L1.892 7.77a.366.366 0 0 0-.516.005l-.423.433a.364.364 0 0 0 .006.514l3.255 3.185a.32.32 0 0 0 .484-.033l6.272-8.048a.365.365 0 0 0-.063-.51z\" fill=\"#4fc3f7\"></path></svg>\n                </span>\n              ) : (\n                <span className=\"send_right\">\n                </span>\n              )}\n              \n              {m.content}\n             \n              <div className=\"time_date\">\n                {new Date(m.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                \n              </div>\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","export default __webpack_public_path__ + \"static/media/WelCome.743b4f32.gif\";","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"red\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n     \n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"right\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModalpic from \"./miscellaneous/ProfileModalpic\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport welcomeImage from \"../image/WelCome.gif\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = process.env.NODE_ENV === \"production\" ? \"https://your-production-endpoint\" : \"http://localhost:5000\";\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  \n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n\n    \n\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n     \n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  <div className=\"profile_check\">\n                    <div className=\"profile_images\">\n                      <ProfileModalpic\n                        user={getSenderFull(user, selectedChat.users)}\n                      />\n                    </div>\n                    <div>{getSender(user, selectedChat.users)}</div>\n                   \n                  </div>\n                 \n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            className=\"chat_bg_new\"\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              \n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div className=\"type_ani\">\n                  <span>Typing</span>\n                  <Lottie\n                    options={defaultOptions}\n               \n                    width={50}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                className=\"inpu\"\n                variant=\"filled\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n       \n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          \n          <img className=\"wel_image\" src={welcomeImage} />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./Chatbox.css\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n     \n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      className=\"chat_bg\"\n    >\n      \n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./Chatbox.css\";\nimport ProfileModalpic from \"./miscellaneous/ProfileModalpic\";\nimport { getSenderFull } from \"../config/ChatLogics\";\nimport { Image } from \"@chakra-ui/react\";\n\n\nconst MyChats = ({ profileImage, fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      className=\"box_img\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <GroupChatModal>\n          <Button\n            bg=\"#04e8ff\"\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            Group +\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                className={`chat_box_s ${\n                  selectedChat === chat ? \"boxShow\" : \"\"\n                }`}\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#fff\" : \"#ddd\"}\n                color={selectedChat === chat ? \"#000\" : \"000\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n               \n                key={chat._id}\n              >\n            \n\n                <Text className=\"profile_name\">\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                \n                {chat.latestMessage && (\n                  \n                  <Text fontSize=\"xs\" className=\"profile_left\">\n                    \n                    <Image\n                     className=\"use_pro\"\n                      boxSize=\"30px\"\n                      src={chat.latestMessage.sender.pic}\n                      alt=\"Profile Image\"\n                      mr=\"2\"\n                      borderRadius=\"50%\"\n                      \n                    />\n                   \n                  \n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport \"./ProfileModal.css\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal  size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered className=\"model_bg\">\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Profile:{user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"./SideDrawer.css\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"main_bg\">\n      <Box className=\"navbar\"\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      \n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen} className=\"search_icon\">\n            <i className=\"fas fa-search\"></i>\n            \n          </Button>\n          \n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n         DeepChat\n        </Text>\n        \n        <div>\n          <Menu className=\"profile_icon\">\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2} className=\"notification_mess\">\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button}  rightIcon={<ChevronDownIcon className=\"profile_icon\"/>}>\n              <Avatar className=\"profile_image\"\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search your Buddy</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Search</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}